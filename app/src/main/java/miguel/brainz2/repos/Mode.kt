package miguel.brainz2.repos


data class Mode(
    val nback: Int,
    val session_number: Int = 0,
    val progress: Int = 0,
    /*
    # The number of trials per session equals
    # NUM_TRIALS + NUM_TRIALS_FACTOR * n ^ NUM_TRIALS_EXPONENT,
    # where n is the current n-back level.

    # Default base number of trials per session.
    # Must be greater than or equal to 1.
    # Default: 20
    */
    val num_trials: Int = 20,

    val num_trials_factor: Int = 1,
    val num_trials_exponent: Int = 2,

    /*
    # Number of 0.1 second intervals per trial.
    # Must be greater than or equal to 4 (ie, 0.4 seconds)
    # Look above to find the corresponding mode number.  Add a line for the mode
    # if it doesn't already exist.  Modes not specifically listed here will
    # use TICKS_DEFAULT instead.
    #
    # Crab and multi-modes will default to the ticks associated with the modes
    # they're based on, *plus an optional bonus*, unless you add a line here to
    # give it a specific value.  Any bonuses will be ignored for specified modes.
    */
    val ticks_per_trial: Int = 30,

    /*
# The chance that a match will be generated by force, in addition to the
# inherent 1/8 chance. High settings will cause repetitive sequences to be
# generated.  Increasing this value will make the n-back task significantly
# easier.  The value must be a decimal from 0 to 1.
# Note: this option has no effect in Jaeggi mode.
# Default: 0.125
*/
    val CHANCE_OF_GUARANTEED_MATCH: Double = 0.125,

    /*
# The chance that a near-miss will be generated to help train resolution of
# cognitive interference.  For example, in 5-back, a near-miss might be
# ABCDE-FGDJK--the "D" comes one trial earlier than would be necessary
# for a correct match.  Near-misses can be one trial short of a match,
# one trial late, or N trials late (would have been a match if it was one
# "cycle" ago).  This setting will never accidentally generate a correct match
# in the case of repeating stimuli if it can be avoided.
# Default:  0.125
*/
    val DEFAULT_CHANCE_OF_INTERFERENCE: Double = 0.125,
    /*
# Thresholds for n-back level advancing & fallback.
# Values are 0-100.
# Set THRESHOLD_ADVANCE to 101 to disable automatic level advance.
# Set THRESHOLD_FALLBACK to 0 to disable fallback.
# FALLBACK_SESSIONS controls the number of sessions below
#    the fallback threshold that will trigger a level decrease.
# Note: in Jaeggi mode, only JAEGGI_ADVANCE and JAEGGI_FALLBACK
#    are used.
# Defaults: 80, 50, 3, 90, 75
*/
    val THRESHOLD_ADVANCE: Int = 80,
    val THRESHOLD_FALLBACK: Int = 50,
    val THRESHOLD_FALLBACK_SESSIONS: Int = 3,


    ) {
    val num_trials_total
        get() = num_trials + num_trials_factor * nback.pow(num_trials_exponent)

}

fun Int.pow(toThe: Int): Long {
    return (1..toThe).fold(1) { acc, i ->
        acc * this
    }
}